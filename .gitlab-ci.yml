stages:
  - build
  - deploy

# ----------------------
# 1. Build Stage
# ----------------------
build_app:
  stage: build
  image: php:8.2-cli
  before_script:
    - apt-get update && apt-get install -y unzip git
    - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
    - curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
    - apt-get install -y nodejs
  script:
    - composer install --no-dev --optimize-autoloader
    - npm install
    - npm run build
    - tar czf app-build.tar.gz ./*
  artifacts:
    paths:
      - app-build.tar.gz
    expire_in: 1 hour
  only:
    - main

# ----------------------
# 2. Deploy Stage
# ----------------------
deploy_production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client rsync
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -p $SSH_PORT $SSH_HOST >> ~/.ssh/known_hosts
  script:
    - scp -P $SSH_PORT app-build.tar.gz $SSH_USER@$SSH_HOST:/tmp/app-build.tar.gz
    - |
      ssh -p $SSH_PORT $SSH_USER@$SSH_HOST "
        mkdir -p $DEPLOY_PATH &&
        tar xzf /tmp/app-build.tar.gz -C $DEPLOY_PATH &&
        rm /tmp/app-build.tar.gz &&
        echo \"$ENV_FILE\" > $DEPLOY_PATH/.env &&
        mkdir -p $DEPLOY_PATH/storage/keys &&
        echo \"$APP_KEY_PUBLIC\" > $DEPLOY_PATH/storage/keys/public.pem &&
        echo \"$APP_KEY_PRIVATE\" > $DEPLOY_PATH/storage/keys/private.pem &&
        chmod 600 $DEPLOY_PATH/storage/keys/*.pem &&
        cd $DEPLOY_PATH &&
        if [ -f vendor/bin/phinx ]; then
          php vendor/bin/phinx migrate -e production
        fi
      "
  dependencies:
    - build_app
  only:
    - main
